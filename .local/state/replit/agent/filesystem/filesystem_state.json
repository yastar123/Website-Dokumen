{"file_contents":{"README.md":{"content":"# Firebase Studio\n\nThis is a NextJS starter in Firebase Studio.\n\nTo get started, take a look at src/app/page.tsx.\n","size_bytes":114},"apphosting.yaml":{"content":"# Settings to manage and configure a Firebase App Hosting backend.\n# https://firebase.google.com/docs/app-hosting/configure\n\nrunConfig:\n  # Increase this value if you'd like to automatically spin up\n  # more instances in response to increased traffic.\n  maxInstances: 1\n","size_bytes":270},"next.config.ts":{"content":"import type {NextConfig} from 'next';\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  // Allow cross-origin requests for Replit proxy environment\n  async rewrites() {\n    return [];\n  },\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'placehold.co',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'images.unsplash.com',\n        port: '',\n        pathname: '/**',\n      },\n      {\n        protocol: 'https',\n        hostname: 'picsum.photos',\n        port: '',\n        pathname: '/**',\n      },\n    ],\n  },\n};\n\nexport default nextConfig;\n","size_bytes":748},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.12\"\ndependencies = [\n    \"cryptography>=46.0.1\",\n]\n","size_bytes":172},"tailwind.config.ts":{"content":"import type {Config} from 'tailwindcss';\n\nexport default {\n  darkMode: ['class'],\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['var(--font-inter)', 'sans-serif'],\n        body: ['var(--font-inter)', 'sans-serif'],\n        headline: ['var(--font-inter)', 'sans-serif'],\n        code: ['monospace'],\n      },\n      colors: {\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        chart: {\n          '1': 'hsl(var(--chart-1))',\n          '2': 'hsl(var(--chart-2))',\n          '3': 'hsl(var(--chart-3))',\n          '4': 'hsl(var(--chart-4))',\n          '5': 'hsl(var(--chart-5))',\n        },\n        sidebar: {\n          DEFAULT: 'hsl(var(--sidebar-background))',\n          foreground: 'hsl(var(--sidebar-foreground))',\n          primary: 'hsl(var(--sidebar-primary))',\n          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n          accent: 'hsl(var(--sidebar-accent))',\n          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n          border: 'hsl(var(--sidebar-border))',\n          ring: 'hsl(var(--sidebar-ring))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: {\n            height: '0',\n          },\n          to: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n        },\n        'accordion-up': {\n          from: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n          to: {\n            height: '0',\n          },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n} satisfies Config;\n","size_bytes":3044},"docs/blueprint.md":{"content":"# **App Name**: SecureDocs\n\n## Core Features:\n\n- User Authentication and Authorization: Secure login and role-based access control for KARYAWAN, ADMIN, and SUPER_ADMIN, leveraging bcryptjs for password hashing.\n- Document Upload and Management: Support uploading, viewing, downloading, and deleting documents, with validation for file types (.png, .jpg, .jpeg, .pdf, .docx) and size limits.\n- Folder/Category System: Organize documents into folders/categories, allowing users to manage and access files efficiently.\n- User Management (Admin): Enable SUPER_ADMIN to manage user accounts, roles, and permissions.\n- Responsive Design: Ensure the application is accessible and functional across various devices (desktops, tablets, and mobile phones).\n- AI-Powered Document Summary: Generate a summary of uploaded documents using a generative AI tool, displayed alongside the document for quick overview.\n\n## Style Guidelines:\n\n- Primary color: Slate blue (#778DA9) to convey trust and professionalism.\n- Background color: Light gray (#F1F1F1) to provide a clean and neutral backdrop.\n- Accent color: Teal (#00A3B0) to highlight key actions and elements, providing contrast and visual interest.\n- Body and headline font: 'Inter', a grotesque-style sans-serif suitable for headlines or body text.\n- Use a set of consistent and professional icons to represent file types, actions, and categories.\n- Maintain a clean and modern design with sidebar navigation, a file grid/list view toggle, and search functionality.\n- Incorporate subtle animations for file uploads, loading states, and user interactions to enhance the user experience.","size_bytes":1627},"src/middleware.ts":{"content":"import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { verifyJwt } from '@/lib/auth';\n\nconst AUTH_PAGES = ['/login'];\nconst ADMIN_PAGES = ['/users', '/monitoring'];\n\nconst isAuthPage = (url: string) => AUTH_PAGES.some((page) => url.startsWith(page));\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  const token = request.cookies.get('token')?.value;\n\n  const decodedToken = token ? await verifyJwt(token) : null;\n  const userRole = decodedToken?.role;\n\n  const isRequestedAuthPage = isAuthPage(pathname);\n\n  if (isRequestedAuthPage) {\n    if (decodedToken) {\n      return NextResponse.redirect(new URL('/dashboard', request.url));\n    }\n    return NextResponse.next();\n  }\n\n  if (!decodedToken) {\n    const searchParams = new URLSearchParams();\n    if (pathname !== '/') {\n        searchParams.set('next', pathname);\n    }\n    const url = new URL('/login', request.url);\n    url.search = searchParams.toString();\n    return NextResponse.redirect(url);\n  }\n\n  // Role-based access control\n  if (ADMIN_PAGES.some(page => pathname.startsWith(page))) {\n    if (userRole !== 'SUPER_ADMIN') {\n      // Redirect to a 'not authorized' page or dashboard\n      return NextResponse.redirect(new URL('/dashboard', request.url));\n    }\n  }\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: [\n    '/dashboard/:path*',\n    '/upload/:path*',\n    '/users/:path*',\n    '/monitoring/:path*',\n    '/folders/:path*',\n    '/profile/:path*',\n    '/login',\n  ],\n};\n","size_bytes":1558},"prisma/migrations/migration_lock.toml":{"content":"# Please do not edit this file manually\n# It should be added in your version-control system (i.e. Git)\nprovider = \"postgresql\"","size_bytes":126},"src/ai/dev.ts":{"content":"import { config } from 'dotenv';\nconfig();\n\nimport '@/ai/flows/generate-document-summary.ts';","size_bytes":93},"src/ai/genkit.ts":{"content":"import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n","size_bytes":172},"src/app/globals.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer base {\n  :root {\n    --background: 0 0% 95%; /* #F1F1F1 */\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 215 20% 66%; /* #778DA9 */\n    --primary-foreground: 0 0% 100%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 184 100% 35%; /* #00A3B0 */\n    --accent-foreground: 0 0% 100%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 215 20% 66%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 240 10% 3.9%;\n    --sidebar-foreground: 0 0% 98%;\n    --sidebar-primary: 215 20% 66%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 0 0% 98%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 215 20% 66%;\n  }\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 215 20% 66%;\n    --primary-foreground: 0 0% 100%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 184 100% 35%;\n    --accent-foreground: 0 0% 100%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 215 20% 66%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 240 10% 3.9%;\n    --sidebar-foreground: 0 0% 98%;\n    --sidebar-primary: 215 20% 66%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 0 0% 98%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 215 20% 66%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":2447},"src/app/layout.tsx":{"content":"import type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\nimport './globals.css';\nimport { Toaster } from '@/components/ui/toaster';\nimport { AuthProvider } from '@/context/auth-provider';\nimport { cookies } from 'next/headers';\nimport { verifyJwt } from '@/lib/auth';\n\nconst inter = Inter({ subsets: ['latin'], variable: '--font-inter' });\n\nexport const metadata: Metadata = {\n  title: 'SecureDocs',\n  description: 'Secure Document Management System',\n};\n\nexport default async function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  const cookieStore = await cookies();\n  const token = cookieStore.get('token')?.value;\n  const user = token ? await verifyJwt(token) : null;\n\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <body className={`${inter.variable} font-sans antialiased h-full`}>\n        <AuthProvider initialUser={user}>\n          {children}\n          <Toaster />\n        </AuthProvider>\n      </body>\n    </html>\n  );\n}\n","size_bytes":993},"src/app/page.tsx":{"content":"import { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\n\nexport default async function Home() {\n  const cookieStore = await cookies();\n  const token = cookieStore.get('token')?.value;\n\n  if (token) {\n    redirect('/dashboard');\n  } else {\n    redirect('/login');\n  }\n\n  return null;\n}\n","size_bytes":313},"src/context/auth-provider.tsx":{"content":"\"use client\";\n\nimport { createContext, useState, useEffect } from 'react';\nimport type { DecodedJwtPayload } from '@/types';\n\ninterface AuthContextType {\n  user: DecodedJwtPayload | null;\n  setUser: React.Dispatch<React.SetStateAction<DecodedJwtPayload | null>>;\n}\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({\n  children,\n  initialUser,\n}: {\n  children: React.ReactNode;\n  initialUser: DecodedJwtPayload | null;\n}) {\n  const [user, setUser] = useState<DecodedJwtPayload | null>(initialUser);\n\n  // You might want to add logic here to re-fetch or re-validate the user\n  // on certain events, like window focus.\n  useEffect(() => {\n    setUser(initialUser);\n  }, [initialUser])\n\n  return (\n    <AuthContext.Provider value={{ user, setUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n","size_bytes":853},"src/hooks/use-auth.ts":{"content":"\"use client\";\n\nimport { useContext } from 'react';\nimport { AuthContext } from '@/context/auth-provider';\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":288},"src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"src/hooks/use-toast.ts":{"content":"\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3948},"src/lib/auth.ts":{"content":"import { SignJWT, jwtVerify } from 'jose';\nimport type { DecodedJwtPayload } from '@/types';\n\nconst getJwtSecretKey = () => {\n  const secret = process.env.JWT_SECRET;\n  if (!secret) {\n    throw new Error('JWT_SECRET is not set in environment variables');\n  }\n  return new TextEncoder().encode(secret);\n};\n\nexport async function signJwt(payload: Omit<DecodedJwtPayload, 'iat' | 'exp'>) {\n  const secret = getJwtSecretKey();\n  const token = await new SignJWT(payload)\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime(process.env.JWT_EXPIRES_IN || '7d')\n    .sign(secret);\n  return token;\n}\n\nexport async function verifyJwt(token: string): Promise<DecodedJwtPayload | null> {\n  try {\n    const secret = getJwtSecretKey();\n    const { payload } = await jwtVerify(token, secret);\n    return payload as DecodedJwtPayload;\n  } catch (error) {\n    return null;\n  }\n}\n","size_bytes":894},"src/lib/password.ts":{"content":"import bcrypt from 'bcryptjs';\n\nexport async function hashPassword(password: string) {\n  const salt = await bcrypt.genSalt(10);\n  return bcrypt.hash(password, salt);\n}\n\nexport async function comparePasswords(password: string, hash: string) {\n  return bcrypt.compare(password, hash);\n}\n","size_bytes":285},"src/lib/placeholder-images.ts":{"content":"import data from './placeholder-images.json';\n\nexport type ImagePlaceholder = {\n  id: string;\n  description: string;\n  imageUrl: string;\n  imageHint: string;\n};\n\nexport const PlaceHolderImages: ImagePlaceholder[] = data.placeholderImages;\n","size_bytes":239},"src/lib/prisma.ts":{"content":"import { PrismaClient } from '@prisma/client';\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient();\n};\n\ndeclare global {\n  var prisma: undefined | ReturnType<typeof prismaClientSingleton>;\n}\n\nconst prisma = globalThis.prisma ?? prismaClientSingleton();\n\nexport default prisma;\n\nif (process.env.NODE_ENV !== 'production') globalThis.prisma = prisma;\n","size_bytes":364},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/types/index.ts":{"content":"import type { Role } from \"@prisma/client\";\n\nexport type UserRole = Role;\n\nexport interface DecodedJwtPayload {\n  id: string;\n  email: string;\n  name: string;\n  role: UserRole;\n  iat: number;\n  exp: number;\n}\n","size_bytes":209},"src/ai/flows/generate-document-summary.ts":{"content":"'use server';\n\n/**\n * @fileOverview An AI agent to generate summaries of uploaded documents.\n *\n * - generateDocumentSummary - A function that handles the document summarization process.\n * - GenerateDocumentSummaryInput - The input type for the generateDocumentSummary function.\n * - GenerateDocumentSummaryOutput - The return type for the generateDocumentSummary function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateDocumentSummaryInputSchema = z.object({\n  documentText: z\n    .string()\n    .describe('The text content of the document to be summarized.'),\n});\nexport type GenerateDocumentSummaryInput = z.infer<\n  typeof GenerateDocumentSummaryInputSchema\n>;\n\nconst GenerateDocumentSummaryOutputSchema = z.object({\n  summary: z\n    .string()\n    .describe('A concise summary of the document content.'),\n});\nexport type GenerateDocumentSummaryOutput = z.infer<\n  typeof GenerateDocumentSummaryOutputSchema\n>;\n\nexport async function generateDocumentSummary(\n  input: GenerateDocumentSummaryInput\n): Promise<GenerateDocumentSummaryOutput> {\n  return generateDocumentSummaryFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateDocumentSummaryPrompt',\n  input: {schema: GenerateDocumentSummaryInputSchema},\n  output: {schema: GenerateDocumentSummaryOutputSchema},\n  prompt: `You are an AI assistant tasked with summarizing documents.\n  Please provide a concise and informative summary of the following document:\n  \\n\\n  {{{documentText}}}\n  \\n\\n  Summary:`,\n});\n\nconst generateDocumentSummaryFlow = ai.defineFlow(\n  {\n    name: 'generateDocumentSummaryFlow',\n    inputSchema: GenerateDocumentSummaryInputSchema,\n    outputSchema: GenerateDocumentSummaryOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n","size_bytes":1806},"src/app/(main)/layout.tsx":{"content":"import { AppLayout } from '@/components/app/app-layout';\n\nexport default function MainLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return <AppLayout>{children}</AppLayout>;\n}\n","size_bytes":192},"src/app/login/page.tsx":{"content":"import { LoginForm } from '@/components/auth/login-form';\nimport { FileLock2 } from 'lucide-react';\n\nexport default function LoginPage() {\n  return (\n    <div className=\"flex min-h-full flex-col justify-center items-center px-6 py-12 lg:px-8 bg-gray-50\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-sm\">\n        <div className=\"flex justify-center\">\n            <FileLock2 className=\"h-12 w-12 text-primary\"/>\n        </div>\n        <h2 className=\"mt-6 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900\">\n          Sign in to SecureDocs\n        </h2>\n      </div>\n\n      <div className=\"mt-10 sm:mx-auto sm:w-full sm:max-w-sm\">\n        <LoginForm />\n      </div>\n    </div>\n  );\n}\n","size_bytes":709},"src/components/app/app-layout.tsx":{"content":"\"use client\";\n\nimport * as React from 'react';\nimport Link from 'next/link';\nimport { useRouter, usePathname } from 'next/navigation';\nimport {\n  File,\n  Home,\n  LogOut,\n  Settings,\n  Users,\n  Upload,\n  Folder,\n  BarChart,\n  FileLock2,\n  Search,\n  ChevronRight\n} from 'lucide-react';\n\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuItem,\n  SidebarMenuButton,\n  SidebarFooter,\n  SidebarProvider,\n  SidebarInset,\n  SidebarTrigger,\n} from '@/components/ui/sidebar';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\nexport function AppLayout({ children }: { children: React.ReactNode }) {\n  const { user } = useAuth();\n  const pathname = usePathname();\n  \n  return (\n    <SidebarProvider>\n      <Sidebar>\n        <SidebarHeader>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"ghost\" size=\"icon\" className=\"shrink-0 text-primary bg-primary-foreground hover:bg-primary-foreground\">\n                <FileLock2/>\n            </Button>\n            <div className=\"flex flex-col\">\n              <span className=\"text-lg font-semibold tracking-tight text-sidebar-foreground\">\n                SecureDocs\n              </span>\n            </div>\n          </div>\n        </SidebarHeader>\n        <SidebarContent>\n          <SidebarMenu>\n            <SidebarMenuItem>\n              <SidebarMenuButton asChild tooltip=\"Dashboard\">\n                <Link href=\"/dashboard\"><Home /><span>Dashboard</span></Link>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n            <SidebarMenuItem>\n              <SidebarMenuButton asChild tooltip=\"Upload\">\n                <Link href=\"/upload\"><Upload /><span>Upload</span></Link>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n            <SidebarMenuItem>\n              <SidebarMenuButton asChild tooltip=\"Folders\">\n                <Link href=\"/folders\"><Folder /><span>Folders</span></Link>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n\n            {user?.role === 'SUPER_ADMIN' && (\n              <>\n                <SidebarMenuItem>\n                  <SidebarMenuButton asChild tooltip=\"User Management\">\n                    <Link href=\"/users\"><Users /><span>Users</span></Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n                <SidebarMenuItem>\n                  <SidebarMenuButton asChild tooltip=\"Monitoring\">\n                    <Link href=\"/monitoring\"><BarChart /><span>Monitoring</span></Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              </>\n            )}\n          </SidebarMenu>\n        </SidebarContent>\n        <SidebarFooter>\n            <UserMenu />\n        </SidebarFooter>\n      </Sidebar>\n      <SidebarInset>\n        <header className=\"flex h-14 items-center gap-4 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 px-4 lg:h-[60px] lg:px-6 sticky top-0 z-30\">\n            <SidebarTrigger className=\"md:hidden\"/>\n            <div className=\"flex flex-1 items-center gap-4\">\n                <Breadcrumbs pathname={pathname} />\n                <div className=\"ml-auto flex items-center gap-4\">\n                    <div className=\"relative\">\n                        <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n                        <Input\n                            type=\"search\"\n                            placeholder=\"Search documents...\"\n                            className=\"pl-8 w-[200px] lg:w-[300px] bg-muted/50 border-0 focus-visible:ring-1\"\n                        />\n                    </div>\n                </div>\n            </div>\n        </header>\n        <main className=\"flex-1 p-4 sm:p-6\">{children}</main>\n      </SidebarInset>\n    </SidebarProvider>\n  );\n}\n\nfunction Breadcrumbs({ pathname }: { pathname: string }) {\n    const segments = pathname.split('/').filter(Boolean);\n    \n    const getBreadcrumbName = (segment: string) => {\n        const names: Record<string, string> = {\n            'dashboard': 'Dashboard',\n            'upload': 'Upload',\n            'folders': 'Folders',\n            'users': 'User Management',\n            'monitoring': 'Monitoring',\n            'profile': 'Profile'\n        };\n        return names[segment] || segment.charAt(0).toUpperCase() + segment.slice(1);\n    };\n\n    if (segments.length === 0) return null;\n\n    return (\n        <nav className=\"flex items-center space-x-1 text-sm text-muted-foreground\">\n            <Link href=\"/dashboard\" className=\"hover:text-foreground transition-colors\">\n                Home\n            </Link>\n            {segments.map((segment, index) => {\n                const href = '/' + segments.slice(0, index + 1).join('/');\n                const isLast = index === segments.length - 1;\n                \n                return (\n                    <React.Fragment key={segment}>\n                        <ChevronRight className=\"h-4 w-4\" />\n                        {isLast ? (\n                            <span className=\"text-foreground font-medium\">\n                                {getBreadcrumbName(segment)}\n                            </span>\n                        ) : (\n                            <Link \n                                href={href} \n                                className=\"hover:text-foreground transition-colors\"\n                            >\n                                {getBreadcrumbName(segment)}\n                            </Link>\n                        )}\n                    </React.Fragment>\n                );\n            })}\n        </nav>\n    );\n}\n\nfunction UserMenu() {\n    const { user, setUser } = useAuth();\n    const router = useRouter();\n    const { toast } = useToast();\n\n    const handleLogout = async () => {\n        try {\n            await fetch('/api/auth/logout', { method: 'POST' });\n            setUser(null);\n            router.push('/login');\n            toast({ title: \"Logged out\", description: \"You have been successfully logged out.\" });\n        } catch (error) {\n            toast({ variant: 'destructive', title: \"Logout failed\", description: \"Could not log out. Please try again.\" });\n        }\n    };\n\n    const getInitials = (name: string) => {\n        const names = name.split(' ');\n        if (names.length > 1) {\n            return `${names[0][0]}${names[names.length - 1][0]}`;\n        }\n        return name.substring(0, 2);\n    }\n    \n    if (!user) return null;\n\n    return (\n        <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"w-full justify-start gap-2 h-12\">\n                     <Avatar className=\"h-8 w-8\">\n                        <AvatarImage src={`https://avatar.vercel.sh/${user.email}.png`} alt={user.name} />\n                        <AvatarFallback>{getInitials(user.name)}</AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex flex-col items-start text-left\">\n                        <p className=\"text-sm font-medium\">{user.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n                    </div>\n                </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                <DropdownMenuLabel className=\"font-normal\">\n                    <div className=\"flex flex-col space-y-1\">\n                        <p className=\"text-sm font-medium leading-none\">{user.name}</p>\n                        <p className=\"text-xs leading-none text-muted-foreground\">\n                            {user.email}\n                        </p>\n                    </div>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem asChild>\n                    <Link href=\"/profile\"><Settings className=\"mr-2 h-4 w-4\"/><span>Profile</span></Link>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={handleLogout} className=\"text-destructive focus:text-destructive focus:bg-destructive/10\">\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    <span>Log out</span>\n                </DropdownMenuItem>\n            </DropdownMenuContent>\n        </DropdownMenu>\n    )\n}\n","size_bytes":8716},"src/components/auth/login-form.tsx":{"content":"\"use client\";\n\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useState } from 'react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2 } from 'lucide-react';\nimport { useAuth } from '@/hooks/use-auth';\n\nconst formSchema = z.object({\n  email: z.string().email({ message: 'Please enter a valid email.' }),\n  password: z.string().min(1, { message: 'Password is required.' }),\n});\n\nexport function LoginForm() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const { toast } = useToast();\n  const { setUser } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsLoading(true);\n    try {\n      const payload = {\n        ...values,\n        email: values.email.trim().toLowerCase(),\n      };\n\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'An error occurred.');\n      }\n      \n      setUser(data.user);\n\n      toast({\n        title: 'Success',\n        description: 'Logged in successfully.',\n      });\n\n      const nextUrl = searchParams.get('next') || '/dashboard';\n      router.push(nextUrl);\n      router.refresh(); // Refresh to update server-side state\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : \"Login failed. Please check your credentials.\";\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: errorMessage,\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email address</FormLabel>\n              <FormControl>\n                <Input placeholder=\"you@example.com\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={form.control}\n          name=\"password\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Password</FormLabel>\n              <FormControl>\n                <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n          {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n          Sign in\n        </Button>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":3379},"src/components/ui/accordion.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1991},"src/components/ui/alert-dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4434},"src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"src/components/ui/calendar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2709},"src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"src/components/ui/carousel.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6224},"src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10479},"src/components/ui/checkbox.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1070},"src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"src/components/ui/dropdown-menu.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7433},"src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"src/components/ui/label.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":724},"src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8505},"src/components/ui/popover.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1244},"src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"src/components/ui/radio-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1481},"src/components/ui/scroll-area.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1656},"src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5629},"src/components/ui/separator.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":770},"src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23381},"src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"src/components/ui/slider.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1091},"src/components/ui/switch.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1153},"src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"src/components/ui/tabs.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1897},"src/components/ui/textarea.tsx":{"content":"import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n","size_bytes":709},"src/components/ui/toast.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4859},"src/components/ui/toaster.tsx":{"content":"\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":786},"src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1159},"src/app/(main)/dashboard/page.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  FileText, \n  Image, \n  File, \n  Users, \n  HardDrive, \n  Activity,\n  Download,\n  Upload as UploadIcon,\n  Eye,\n  FolderOpen\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Link from \"next/link\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface DashboardStats {\n  documentsCount: number;\n  totalUsers: number;\n  storageUsed: string;\n  storageBytes: number;\n  recentDocuments: Array<{\n    id: string;\n    originalName: string;\n    fileType: string;\n    fileSize: number;\n    createdAt: string;\n    uploadedBy: { name: string; email: string };\n    folder?: { name: string } | null;\n  }>;\n  documentsByType: Array<{\n    type: string;\n    count: number;\n  }>;\n  recentActivity: Array<{\n    id: string;\n    action: string;\n    details: string | null;\n    createdAt: string;\n    user: { name: string; email: string };\n    document?: { originalName: string } | null;\n  }>;\n}\n\nexport default function DashboardPage() {\n  const [stats, setStats] = useState<DashboardStats | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    fetchDashboardStats();\n  }, []);\n\n  const fetchDashboardStats = async () => {\n    try {\n      const response = await fetch('/api/dashboard');\n      if (!response.ok) {\n        throw new Error('Failed to fetch dashboard data');\n      }\n      const data = await response.json();\n      setStats(data);\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to load dashboard data\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getFileIcon = (fileType: string) => {\n    if (fileType.startsWith('image/')) return <Image className=\"h-4 w-4\" />;\n    if (fileType === 'application/pdf') return <FileText className=\"h-4 w-4\" />;\n    return <File className=\"h-4 w-4\" />;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getFileTypeLabel = (fileType: string) => {\n    if (fileType.startsWith('image/')) return 'Images';\n    if (fileType === 'application/pdf') return 'PDFs';\n    if (fileType.includes('word')) return 'Word Docs';\n    if (fileType.includes('excel') || fileType.includes('spreadsheet')) return 'Spreadsheets';\n    return 'Other';\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Dashboard</h1>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-4 w-24 mb-2\" />\n                <Skeleton className=\"h-8 w-16\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        <Card>\n          <CardContent className=\"p-6\">\n            <Skeleton className=\"h-48 w-full\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!stats) return null;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Dashboard</h1>\n        <div className=\"flex gap-2\">\n          <Badge variant=\"outline\">Welcome, {user?.name}</Badge>\n        </div>\n      </div>\n      \n      {/* Stats Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Documents</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\"/>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.documentsCount}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats.documentsCount === 0 ? 'No documents yet' : \n               user?.role === 'SUPER_ADMIN' ? 'Total across all users' : 'Your documents'}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Storage Used</CardTitle>\n            <HardDrive className=\"h-4 w-4 text-muted-foreground\"/>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.storageUsed}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {user?.role === 'SUPER_ADMIN' ? 'Total storage' : 'Your storage'}\n            </p>\n          </CardContent>\n        </Card>\n\n        {user?.role === 'SUPER_ADMIN' && (\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\"/>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.totalUsers}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Active users in system\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">File Types</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\"/>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.documentsByType.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Different file types\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-3\">\n        {/* Recent Documents */}\n        <div className=\"md:col-span-2\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle>Recent Documents</CardTitle>\n              <Button variant=\"outline\" size=\"sm\" asChild>\n                <Link href=\"/upload\">\n                  <UploadIcon className=\"h-4 w-4 mr-2\" />\n                  Upload New\n                </Link>\n              </Button>\n            </CardHeader>\n            <CardContent>\n              {stats.recentDocuments.length === 0 ? (\n                <div className=\"text-center text-muted-foreground py-12\">\n                  <FileText className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                  <p>No documents found.</p>\n                  <p className=\"text-sm mt-2\">Get started by uploading your first document.</p>\n                  <Button className=\"mt-4\" asChild>\n                    <Link href=\"/upload\">Upload Document</Link>\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {stats.recentDocuments.map((doc) => (\n                    <div key={doc.id} className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50\">\n                      <div className=\"flex items-center space-x-3\">\n                        {getFileIcon(doc.fileType)}\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm font-medium truncate\">{doc.originalName}</p>\n                          <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                            <span>{formatFileSize(doc.fileSize)}</span>\n                            <span>•</span>\n                            <span>{formatDistanceToNow(new Date(doc.createdAt), { addSuffix: true })}</span>\n                            {doc.folder && (\n                              <>\n                                <span>•</span>\n                                <span className=\"flex items-center\">\n                                  <FolderOpen className=\"h-3 w-3 mr-1\" />\n                                  {doc.folder.name}\n                                </span>\n                              </>\n                            )}\n                            {user?.role === 'SUPER_ADMIN' && (\n                              <>\n                                <span>•</span>\n                                <span>{doc.uploadedBy.name}</span>\n                              </>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Download className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* File Types and Activity */}\n        <div className=\"space-y-6\">\n          {/* File Types */}\n          <Card>\n            <CardHeader>\n              <CardTitle>File Types</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {stats.documentsByType.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">No files uploaded yet</p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {stats.documentsByType.map((item, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-2\">\n                        {getFileIcon(item.type)}\n                        <span className=\"text-sm\">{getFileTypeLabel(item.type)}</span>\n                      </div>\n                      <Badge variant=\"secondary\">{item.count}</Badge>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Recent Activity (Admin only) */}\n          {user?.role === 'SUPER_ADMIN' && stats.recentActivity.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Activity</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {stats.recentActivity.slice(0, 5).map((activity) => (\n                    <div key={activity.id} className=\"text-sm\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"font-medium\">{activity.user.name}</span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {formatDistanceToNow(new Date(activity.createdAt), { addSuffix: true })}\n                        </span>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {activity.action.replace('_', ' ').toLowerCase()}\n                        {activity.document && ` - ${activity.document.originalName}`}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11978},"src/app/(main)/folders/page.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { \n  FolderPlus, \n  Folder, \n  Edit2, \n  Trash2, \n  FileText,\n  Calendar,\n  User,\n  MoreHorizontal\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport Link from \"next/link\";\n\ninterface FolderData {\n  id: string;\n  name: string;\n  createdAt: string;\n  user: { name: string; email: string };\n  _count: { documents: number };\n}\n\nconst folderSchema = z.object({\n  name: z.string().min(1, 'Folder name is required').max(100, 'Folder name too long'),\n});\n\nexport default function FoldersPage() {\n  const [folders, setFolders] = useState<FolderData[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingFolder, setEditingFolder] = useState<FolderData | null>(null);\n  const [deletingFolder, setDeletingFolder] = useState<FolderData | null>(null);\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const createForm = useForm<z.infer<typeof folderSchema>>({\n    resolver: zodResolver(folderSchema),\n    defaultValues: {\n      name: '',\n    },\n  });\n\n  const editForm = useForm<z.infer<typeof folderSchema>>({\n    resolver: zodResolver(folderSchema),\n    defaultValues: {\n      name: '',\n    },\n  });\n\n  useEffect(() => {\n    fetchFolders();\n  }, []);\n\n  const fetchFolders = async () => {\n    try {\n      const response = await fetch('/api/folders');\n      if (!response.ok) throw new Error('Failed to fetch folders');\n      const data = await response.json();\n      setFolders(data.folders);\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to load folders\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onCreateFolder = async (values: z.infer<typeof folderSchema>) => {\n    try {\n      const response = await fetch('/api/folders', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(values),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n\n      await fetchFolders();\n      setIsCreateDialogOpen(false);\n      createForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Folder created successfully\"\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create folder\"\n      });\n    }\n  };\n\n  const onEditFolder = async (values: z.infer<typeof folderSchema>) => {\n    if (!editingFolder) return;\n\n    try {\n      const response = await fetch(`/api/folders/${editingFolder.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(values),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n\n      await fetchFolders();\n      setIsEditDialogOpen(false);\n      setEditingFolder(null);\n      editForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Folder updated successfully\"\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to update folder\"\n      });\n    }\n  };\n\n  const onDeleteFolder = async () => {\n    if (!deletingFolder) return;\n\n    try {\n      const response = await fetch(`/api/folders/${deletingFolder.id}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n\n      await fetchFolders();\n      setDeletingFolder(null);\n      toast({\n        title: \"Success\",\n        description: \"Folder deleted successfully\"\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to delete folder\"\n      });\n    }\n  };\n\n  const openEditDialog = (folder: FolderData) => {\n    setEditingFolder(folder);\n    editForm.setValue('name', folder.name);\n    setIsEditDialogOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Folders</h1>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-6\">\n                <Skeleton className=\"h-20 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Folders</h1>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <FolderPlus className=\"h-4 w-4 mr-2\" />\n              New Folder\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create New Folder</DialogTitle>\n            </DialogHeader>\n            <Form {...createForm}>\n              <form onSubmit={createForm.handleSubmit(onCreateFolder)} className=\"space-y-4\">\n                <FormField\n                  control={createForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Folder Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"My Documents\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">Create Folder</Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n      \n      {folders.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-16\">\n            <div className=\"text-center text-muted-foreground\">\n              <Folder className=\"h-16 w-16 mx-auto mb-4 text-gray-300\" />\n              <h3 className=\"text-lg font-medium mb-2\">No folders yet</h3>\n              <p className=\"mb-4\">Create your first folder to organize your documents</p>\n              <Button onClick={() => setIsCreateDialogOpen(true)}>\n                <FolderPlus className=\"h-4 w-4 mr-2\" />\n                Create Folder\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {folders.map((folder) => (\n            <Card key={folder.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Folder className=\"h-5 w-5 text-blue-500\" />\n                    <CardTitle className=\"text-lg truncate\">{folder.name}</CardTitle>\n                  </div>\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                        <MoreHorizontal className=\"h-4 w-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                      <DropdownMenuItem onClick={() => openEditDialog(folder)}>\n                        <Edit2 className=\"h-4 w-4 mr-2\" />\n                        Rename\n                      </DropdownMenuItem>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem \n                        onClick={() => setDeletingFolder(folder)}\n                        className=\"text-destructive focus:text-destructive\"\n                        disabled={folder._count.documents > 0}\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        Delete\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center space-x-1 text-muted-foreground\">\n                      <FileText className=\"h-4 w-4\" />\n                      <span>{folder._count.documents} documents</span>\n                    </div>\n                    {folder._count.documents > 0 && (\n                      <Button variant=\"outline\" size=\"sm\" asChild>\n                        <Link href={`/folders/${folder.id}`}>View</Link>\n                      </Button>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-4 text-xs text-muted-foreground\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Calendar className=\"h-3 w-3\" />\n                      <span>{formatDistanceToNow(new Date(folder.createdAt), { addSuffix: true })}</span>\n                    </div>\n                    {user?.role === 'SUPER_ADMIN' && (\n                      <div className=\"flex items-center space-x-1\">\n                        <User className=\"h-3 w-3\" />\n                        <span>{folder.user.name}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Edit Folder Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Rename Folder</DialogTitle>\n          </DialogHeader>\n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit(onEditFolder)} className=\"space-y-4\">\n              <FormField\n                control={editForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Folder Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"My Documents\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\">Update Folder</Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deletingFolder} onOpenChange={() => setDeletingFolder(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Folder</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete the folder \"{deletingFolder?.name}\"? \n              {deletingFolder?._count.documents === 0 \n                ? \"This action cannot be undone.\"\n                : \"This folder contains documents and cannot be deleted. Move or delete the documents first.\"\n              }\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={onDeleteFolder}\n              disabled={deletingFolder?._count.documents ? deletingFolder._count.documents > 0 : false}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":13772},"src/app/(main)/monitoring/page.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function MonitoringPage() {\n  return (\n    <div className=\"space-y-6\">\n      <h1 className=\"text-3xl font-bold tracking-tight\">Activity Monitoring</h1>\n      \n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activities</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center text-muted-foreground py-12\">\n            <p>The activity log dashboard will be displayed here.</p>\n            <p className=\"text-sm mt-2\">This feature is coming soon.</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":668},"src/app/(main)/profile/page.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\n// This needs to be a client component to use the hook\n\"use client\";\n\nexport default function ProfilePage() {\n  const { user } = useAuth();\n  return (\n    <div className=\"space-y-6\">\n      <h1 className=\"text-3xl font-bold tracking-tight\">Profile</h1>\n      \n      <Card>\n        <CardHeader>\n          <CardTitle>Your Information</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <p className=\"font-medium\">Name</p>\n              <p className=\"text-muted-foreground\">{user?.name}</p>\n            </div>\n             <div>\n              <p className=\"font-medium\">Email</p>\n              <p className=\"text-muted-foreground\">{user?.email}</p>\n            </div>\n             <div>\n              <p className=\"font-medium\">Role</p>\n              <p className=\"text-muted-foreground\">{user?.role}</p>\n            </div>\n            <p className=\"text-center text-muted-foreground pt-8\">More profile settings coming soon.</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1197},"src/app/(main)/upload/page.tsx":{"content":"\"use client\";\n\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, FileText, Image, File, X, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface UploadFile {\n  file: File;\n  progress: number;\n  status: 'uploading' | 'success' | 'error';\n  id: string;\n}\n\nexport default function UploadPage() {\n  const [uploadFiles, setUploadFiles] = useState<UploadFile[]>([]);\n  const [selectedFolder, setSelectedFolder] = useState<string>(\"\");\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const onDrop = (acceptedFiles: File[]) => {\n    const newFiles = acceptedFiles.map(file => ({\n      file,\n      progress: 0,\n      status: 'uploading' as const,\n      id: Math.random().toString(36).substr(2, 9)\n    }));\n    \n    setUploadFiles(prev => [...prev, ...newFiles]);\n    \n    newFiles.forEach(uploadFile => {\n      uploadFileToServer(uploadFile);\n    });\n  };\n\n  const uploadFileToServer = async (uploadFile: UploadFile) => {\n    const formData = new FormData();\n    formData.append('file', uploadFile.file);\n    if (selectedFolder) {\n      formData.append('folderId', selectedFolder);\n    }\n\n    try {\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      // Simulate progress\n      const interval = setInterval(() => {\n        setUploadFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, progress: Math.min(f.progress + 10, 90) }\n            : f\n        ));\n      }, 200);\n\n      const result = await response.json();\n      clearInterval(interval);\n\n      setUploadFiles(prev => prev.map(f => \n        f.id === uploadFile.id \n          ? { ...f, progress: 100, status: 'success' }\n          : f\n      ));\n\n      toast({\n        title: \"Upload successful\",\n        description: `${uploadFile.file.name} has been uploaded successfully.`\n      });\n      \n    } catch (error) {\n      setUploadFiles(prev => prev.map(f => \n        f.id === uploadFile.id \n          ? { ...f, status: 'error' }\n          : f\n      ));\n      \n      toast({\n        variant: \"destructive\",\n        title: \"Upload failed\",\n        description: `Failed to upload ${uploadFile.file.name}`\n      });\n    }\n  };\n\n  const removeFile = (id: string) => {\n    setUploadFiles(prev => prev.filter(f => f.id !== id));\n  };\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.png', '.jpg', '.jpeg', '.gif', '.webp'],\n      'application/pdf': ['.pdf'],\n      'application/msword': ['.doc'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],\n      'application/vnd.ms-excel': ['.xls'],\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'],\n      'text/plain': ['.txt'],\n    },\n    maxFileSize: 10 * 1024 * 1024, // 10MB\n  });\n\n  const getFileIcon = (fileType: string) => {\n    if (fileType.startsWith('image/')) return <Image className=\"h-4 w-4\" />;\n    if (fileType === 'application/pdf') return <FileText className=\"h-4 w-4\" />;\n    return <File className=\"h-4 w-4\" />;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Upload Documents</h1>\n        <Badge variant=\"secondary\">{user?.name}</Badge>\n      </div>\n      \n      <div className=\"grid gap-6 md:grid-cols-3\">\n        <div className=\"md:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Upload Files</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"folder\">Select Folder (Optional)</Label>\n                <Select value={selectedFolder} onValueChange={setSelectedFolder}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a folder\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">No folder</SelectItem>\n                    {/* TODO: Load folders from API */}\n                    <SelectItem value=\"documents\">Documents</SelectItem>\n                    <SelectItem value=\"images\">Images</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div\n                {...getRootProps()}\n                className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors cursor-pointer ${\n                  isDragActive\n                    ? 'border-primary bg-primary/5'\n                    : 'border-gray-300 hover:border-primary/50'\n                }`}\n              >\n                <input {...getInputProps()} />\n                <Upload className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                {isDragActive ? (\n                  <p className=\"text-lg\">Drop the files here...</p>\n                ) : (\n                  <>\n                    <p className=\"text-lg mb-2\">Drag & drop files here, or click to select</p>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Supports: Images (PNG, JPG, GIF), Documents (PDF, DOC, DOCX, XLS, XLSX, TXT)\n                    </p>\n                    <Button variant=\"outline\">Choose Files</Button>\n                  </>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {uploadFiles.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Upload Progress</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {uploadFiles.map((uploadFile) => (\n                    <div key={uploadFile.id} className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n                      <div className=\"flex-shrink-0\">\n                        {getFileIcon(uploadFile.file.type)}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium truncate\">{uploadFile.file.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {formatFileSize(uploadFile.file.size)}\n                        </p>\n                        {uploadFile.status === 'uploading' && (\n                          <Progress value={uploadFile.progress} className=\"mt-1\" />\n                        )}\n                      </div>\n                      <div className=\"flex-shrink-0 flex items-center space-x-2\">\n                        {uploadFile.status === 'success' && (\n                          <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                        )}\n                        {uploadFile.status === 'error' && (\n                          <AlertCircle className=\"h-5 w-5 text-red-500\" />\n                        )}\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeFile(uploadFile.id)}\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Upload Guidelines</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-medium mb-2\">Supported Formats</h4>\n              <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>• Images: PNG, JPG, JPEG, GIF, WebP</li>\n                <li>• Documents: PDF, DOC, DOCX</li>\n                <li>• Spreadsheets: XLS, XLSX</li>\n                <li>• Text files: TXT</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium mb-2\">File Limits</h4>\n              <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>• Maximum file size: 10MB</li>\n                <li>• Multiple files supported</li>\n                <li>• Automatic file type detection</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-medium mb-2\">Security</h4>\n              <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>• Files are scanned for security</li>\n                <li>• Access controlled by roles</li>\n                <li>• Activity logging enabled</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9655},"src/app/(main)/users/page.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { \n  UserPlus, \n  Edit, \n  Shield, \n  ShieldCheck, \n  ShieldX, \n  Calendar,\n  FileText,\n  MoreHorizontal\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: 'KARYAWAN' | 'ADMIN' | 'SUPER_ADMIN';\n  isActive: boolean;\n  lastLogin: string | null;\n  createdAt: string;\n  createdBy?: { name: string } | null;\n  _count: { documents: number };\n}\n\nconst createUserSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  role: z.enum(['KARYAWAN', 'ADMIN', 'SUPER_ADMIN']),\n});\n\nconst updateUserSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  role: z.enum(['KARYAWAN', 'ADMIN', 'SUPER_ADMIN']),\n});\n\nexport default function UsersPage() {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const { user: currentUser } = useAuth();\n  const { toast } = useToast();\n\n  const createForm = useForm<z.infer<typeof createUserSchema>>({\n    resolver: zodResolver(createUserSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      password: '',\n      role: 'KARYAWAN',\n    },\n  });\n\n  const editForm = useForm<z.infer<typeof updateUserSchema>>({\n    resolver: zodResolver(updateUserSchema),\n    defaultValues: {\n      name: '',\n      role: 'KARYAWAN',\n    },\n  });\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const fetchUsers = async () => {\n    try {\n      const response = await fetch('/api/users');\n      if (!response.ok) throw new Error('Failed to fetch users');\n      const data = await response.json();\n      setUsers(data.users);\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Failed to load users\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onCreateUser = async (values: z.infer<typeof createUserSchema>) => {\n    try {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(values),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n\n      await fetchUsers();\n      setIsCreateDialogOpen(false);\n      createForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"User created successfully\"\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to create user\"\n      });\n    }\n  };\n\n  const onEditUser = async (values: z.infer<typeof updateUserSchema>) => {\n    if (!editingUser) return;\n\n    try {\n      const response = await fetch(`/api/users/${editingUser.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(values),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n\n      await fetchUsers();\n      setIsEditDialogOpen(false);\n      setEditingUser(null);\n      editForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"User updated successfully\"\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to update user\"\n      });\n    }\n  };\n\n  const toggleUserStatus = async (userId: string, isActive: boolean) => {\n    try {\n      const response = await fetch(`/api/users/${userId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ isActive }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n\n      await fetchUsers();\n      toast({\n        title: \"Success\",\n        description: `User ${isActive ? 'activated' : 'deactivated'} successfully`\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to update user status\"\n      });\n    }\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'SUPER_ADMIN': return <ShieldCheck className=\"h-4 w-4\" />;\n      case 'ADMIN': return <Shield className=\"h-4 w-4\" />;\n      default: return <ShieldX className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getRoleBadge = (role: string) => {\n    switch (role) {\n      case 'SUPER_ADMIN': return <Badge variant=\"destructive\">Super Admin</Badge>;\n      case 'ADMIN': return <Badge variant=\"secondary\">Admin</Badge>;\n      default: return <Badge variant=\"outline\">Employee</Badge>;\n    }\n  };\n\n  const openEditDialog = (user: User) => {\n    setEditingUser(user);\n    editForm.setValue('name', user.name);\n    editForm.setValue('role', user.role);\n    setIsEditDialogOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">User Management</h1>\n        <Card>\n          <CardContent className=\"p-6\">\n            <Skeleton className=\"h-64 w-full\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">User Management</h1>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <UserPlus className=\"h-4 w-4 mr-2\" />\n              Add User\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create New User</DialogTitle>\n            </DialogHeader>\n            <Form {...createForm}>\n              <form onSubmit={createForm.handleSubmit(onCreateUser)} className=\"space-y-4\">\n                <FormField\n                  control={createForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"John Doe\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"john@company.com\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"••••••••\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Role</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a role\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"KARYAWAN\">Employee</SelectItem>\n                          <SelectItem value=\"ADMIN\">Admin</SelectItem>\n                          <SelectItem value=\"SUPER_ADMIN\">Super Admin</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">Create User</Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n      \n      <Card>\n        <CardHeader>\n          <CardTitle>All Users ({users.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>User</TableHead>\n                <TableHead>Role</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Documents</TableHead>\n                <TableHead>Last Login</TableHead>\n                <TableHead>Created</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {users.map((user) => (\n                <TableRow key={user.id}>\n                  <TableCell>\n                    <div>\n                      <div className=\"font-medium\">{user.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">{user.email}</div>\n                      {user.createdBy && (\n                        <div className=\"text-xs text-muted-foreground\">Created by {user.createdBy.name}</div>\n                      )}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      {getRoleIcon(user.role)}\n                      {getRoleBadge(user.role)}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        checked={user.isActive}\n                        onCheckedChange={(checked) => toggleUserStatus(user.id, checked)}\n                        disabled={user.id === currentUser?.id}\n                      />\n                      <span className=\"text-sm\">\n                        {user.isActive ? 'Active' : 'Inactive'}\n                      </span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-1\">\n                      <FileText className=\"h-4 w-4\" />\n                      <span>{user._count.documents}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-1\">\n                      <Calendar className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">\n                        {user.lastLogin\n                          ? formatDistanceToNow(new Date(user.lastLogin), { addSuffix: true })\n                          : 'Never'\n                        }\n                      </span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {formatDistanceToNow(new Date(user.createdAt), { addSuffix: true })}\n                    </span>\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                        <DropdownMenuItem onClick={() => openEditDialog(user)}>\n                          <Edit className=\"h-4 w-4 mr-2\" />\n                          Edit User\n                        </DropdownMenuItem>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem\n                          onClick={() => toggleUserStatus(user.id, !user.isActive)}\n                          disabled={user.id === currentUser?.id}\n                        >\n                          {user.isActive ? 'Deactivate' : 'Activate'}\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Edit User Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit User</DialogTitle>\n          </DialogHeader>\n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit(onEditUser)} className=\"space-y-4\">\n              <FormField\n                control={editForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"John Doe\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={editForm.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select a role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"KARYAWAN\">Employee</SelectItem>\n                        <SelectItem value=\"ADMIN\">Admin</SelectItem>\n                        <SelectItem value=\"SUPER_ADMIN\">Super Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\">Update User</Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":16836},"src/app/api/dashboard/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { verifyJwt } from '@/lib/auth';\nimport prisma from '@/lib/prisma';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify authentication\n    const token = request.cookies.get('token')?.value;\n    if (!token) {\n      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n    }\n\n    const user = await verifyJwt(token);\n    if (!user) {\n      return NextResponse.json({ message: 'Invalid token' }, { status: 401 });\n    }\n\n    // Get user's documents count and recent documents\n    const [documentsCount, recentDocuments, totalUsers, recentActivity] = await Promise.all([\n      // Total documents for current user (or all if admin)\n      prisma.document.count({\n        where: user.role === 'SUPER_ADMIN' ? {} : { uploadedById: user.id }\n      }),\n      \n      // Recent documents\n      prisma.document.findMany({\n        where: user.role === 'SUPER_ADMIN' ? {} : { uploadedById: user.id },\n        orderBy: { createdAt: 'desc' },\n        take: 5,\n        include: {\n          uploadedBy: {\n            select: { name: true, email: true }\n          },\n          folder: {\n            select: { name: true }\n          }\n        }\n      }),\n      \n      // Total users (admin only)\n      user.role === 'SUPER_ADMIN' ? prisma.user.count() : 0,\n      \n      // Recent activity (admin only)\n      user.role === 'SUPER_ADMIN' \n        ? prisma.activityLog.findMany({\n            orderBy: { createdAt: 'desc' },\n            take: 10,\n            include: {\n              user: {\n                select: { name: true, email: true }\n              },\n              document: {\n                select: { originalName: true }\n              }\n            }\n          })\n        : []\n    ]);\n\n    // Calculate total storage used\n    const storageUsed = await prisma.document.aggregate({\n      where: user.role === 'SUPER_ADMIN' ? {} : { uploadedById: user.id },\n      _sum: {\n        fileSize: true\n      }\n    });\n\n    // Calculate documents by type\n    const documentsByType = await prisma.document.groupBy({\n      by: ['fileType'],\n      where: user.role === 'SUPER_ADMIN' ? {} : { uploadedById: user.id },\n      _count: {\n        fileType: true\n      }\n    });\n\n    // Format storage usage\n    const formatFileSize = (bytes: number | null) => {\n      if (!bytes || bytes === 0) return '0 Bytes';\n      const k = 1024;\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    };\n\n    const stats = {\n      documentsCount,\n      totalUsers,\n      storageUsed: formatFileSize(storageUsed._sum.fileSize),\n      storageBytes: storageUsed._sum.fileSize || 0,\n      recentDocuments: recentDocuments.map(doc => ({\n        id: doc.id,\n        originalName: doc.originalName,\n        fileType: doc.fileType,\n        fileSize: doc.fileSize,\n        createdAt: doc.createdAt,\n        uploadedBy: doc.uploadedBy,\n        folder: doc.folder\n      })),\n      documentsByType: documentsByType.map(item => ({\n        type: item.fileType,\n        count: item._count.fileType\n      })),\n      recentActivity: user.role === 'SUPER_ADMIN' ? recentActivity.map(activity => ({\n        id: activity.id,\n        action: activity.action,\n        details: activity.details,\n        createdAt: activity.createdAt,\n        user: activity.user,\n        document: activity.document\n      })) : []\n    };\n\n    return NextResponse.json(stats);\n\n  } catch (error) {\n    console.error('Dashboard API error:', error);\n    return NextResponse.json(\n      { message: 'Failed to fetch dashboard data' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":3722},"src/app/api/upload/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { writeFile, mkdir } from 'fs/promises';\nimport { join, extname } from 'path';\nimport { verifyJwt } from '@/lib/auth';\nimport prisma from '@/lib/prisma';\nimport { randomUUID } from 'crypto';\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify authentication\n    const token = request.cookies.get('token')?.value;\n    if (!token) {\n      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n    }\n\n    const user = await verifyJwt(token);\n    if (!user) {\n      return NextResponse.json({ message: 'Invalid token' }, { status: 401 });\n    }\n\n    // Parse form data\n    const formData = await request.formData();\n    const file = formData.get('file') as File;\n    const folderId = formData.get('folderId') as string | null;\n\n    if (!file) {\n      return NextResponse.json({ message: 'No file provided' }, { status: 400 });\n    }\n\n    // Validate file size (10MB max)\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    if (file.size > maxSize) {\n      return NextResponse.json({ \n        message: 'File too large. Maximum size is 10MB.' \n      }, { status: 400 });\n    }\n\n    // Validate file type\n    const allowedTypes = [\n      'image/png', 'image/jpeg', 'image/jpg', 'image/gif', 'image/webp',\n      'application/pdf',\n      'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'text/plain'\n    ];\n\n    if (!allowedTypes.includes(file.type)) {\n      return NextResponse.json({ \n        message: 'File type not supported.' \n      }, { status: 400 });\n    }\n\n    // Generate unique filename\n    const fileExtension = extname(file.name);\n    const uniqueFilename = `${randomUUID()}${fileExtension}`;\n    \n    // Create uploads directory if it doesn't exist\n    const uploadsDir = join(process.cwd(), 'public', 'uploads');\n    try {\n      await mkdir(uploadsDir, { recursive: true });\n    } catch (error) {\n      // Directory might already exist\n    }\n\n    // Save file to disk\n    const filePath = join(uploadsDir, uniqueFilename);\n    const bytes = await file.arrayBuffer();\n    await writeFile(filePath, new Uint8Array(bytes));\n\n    // Save to database\n    const document = await prisma.document.create({\n      data: {\n        filename: uniqueFilename,\n        originalName: file.name,\n        fileSize: file.size,\n        fileType: file.type,\n        filePath: `/uploads/${uniqueFilename}`,\n        uploadedById: user.id,\n        folderId: folderId || null,\n      },\n    });\n\n    // Log activity\n    await prisma.activityLog.create({\n      data: {\n        userId: user.id,\n        action: 'UPLOAD_DOCUMENT',\n        details: `Uploaded file: ${file.name}`,\n        documentId: document.id,\n        ipAddress: request.headers.get('x-forwarded-for') || \n                   request.headers.get('x-real-ip') || \n                   'unknown',\n      },\n    });\n\n    return NextResponse.json({\n      message: 'File uploaded successfully',\n      document: {\n        id: document.id,\n        filename: document.filename,\n        originalName: document.originalName,\n        fileSize: document.fileSize,\n        fileType: document.fileType,\n        filePath: document.filePath,\n        createdAt: document.createdAt,\n      },\n    });\n\n  } catch (error) {\n    console.error('Upload error:', error);\n    return NextResponse.json(\n      { message: 'Upload failed. Please try again.' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":3565},"src/app/api/users/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { verifyJwt } from '@/lib/auth';\nimport { hashPassword } from '@/lib/password';\nimport prisma from '@/lib/prisma';\nimport { z } from 'zod';\n\nconst createUserSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  role: z.enum(['KARYAWAN', 'ADMIN', 'SUPER_ADMIN']),\n});\n\nconst updateUserSchema = z.object({\n  name: z.string().min(1, 'Name is required').optional(),\n  role: z.enum(['KARYAWAN', 'ADMIN', 'SUPER_ADMIN']).optional(),\n  isActive: z.boolean().optional(),\n});\n\n// GET /api/users - List all users (admin only)\nexport async function GET(request: NextRequest) {\n  try {\n    const token = request.cookies.get('token')?.value;\n    if (!token) {\n      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n    }\n\n    const user = await verifyJwt(token);\n    if (!user || user.role !== 'SUPER_ADMIN') {\n      return NextResponse.json({ message: 'Forbidden' }, { status: 403 });\n    }\n\n    const users = await prisma.user.findMany({\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        role: true,\n        isActive: true,\n        lastLogin: true,\n        createdAt: true,\n        createdBy: {\n          select: { name: true }\n        },\n        _count: {\n          select: {\n            documents: true\n          }\n        }\n      },\n      orderBy: { createdAt: 'desc' }\n    });\n\n    return NextResponse.json({ users });\n\n  } catch (error) {\n    console.error('Users API error:', error);\n    return NextResponse.json(\n      { message: 'Failed to fetch users' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/users - Create new user (admin only)\nexport async function POST(request: NextRequest) {\n  try {\n    const token = request.cookies.get('token')?.value;\n    if (!token) {\n      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n    }\n\n    const user = await verifyJwt(token);\n    if (!user || user.role !== 'SUPER_ADMIN') {\n      return NextResponse.json({ message: 'Forbidden' }, { status: 403 });\n    }\n\n    const body = await request.json();\n    const validation = createUserSchema.safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json(\n        { message: 'Invalid input', errors: validation.error.flatten() },\n        { status: 400 }\n      );\n    }\n\n    const { name, email, password, role } = validation.data;\n\n    // Check if user already exists\n    const existingUser = await prisma.user.findFirst({\n      where: { email: { equals: email.toLowerCase(), mode: 'insensitive' } }\n    });\n\n    if (existingUser) {\n      return NextResponse.json(\n        { message: 'User with this email already exists' },\n        { status: 409 }\n      );\n    }\n\n    // Hash password and create user\n    const hashedPassword = await hashPassword(password);\n    \n    const newUser = await prisma.user.create({\n      data: {\n        name,\n        email: email.toLowerCase(),\n        password: hashedPassword,\n        role,\n        createdById: user.id,\n      },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        role: true,\n        isActive: true,\n        createdAt: true,\n      }\n    });\n\n    // Log activity\n    await prisma.activityLog.create({\n      data: {\n        userId: user.id,\n        action: 'CREATE_USER',\n        details: `Created user: ${newUser.name} (${newUser.email})`,\n        ipAddress: request.headers.get('x-forwarded-for') || \n                   request.headers.get('x-real-ip') || \n                   'unknown',\n      },\n    });\n\n    return NextResponse.json({\n      message: 'User created successfully',\n      user: newUser\n    });\n\n  } catch (error) {\n    console.error('Create user error:', error);\n    return NextResponse.json(\n      { message: 'Failed to create user' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":3957},"src/app/api/auth/dev-upsert-user/route.ts":{"content":"import { NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport prisma from '@/lib/prisma';\nimport { hashPassword } from '@/lib/password';\n\nconst payloadSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n  name: z.string().min(1).default('Dev User'),\n  role: z.enum(['KARYAWAN', 'ADMIN', 'SUPER_ADMIN']).default('KARYAWAN'),\n  isActive: z.boolean().default(true),\n});\n\nexport async function POST(request: Request) {\n  try {\n    if (process.env.ALLOW_DEV_USER_SEED !== 'true') {\n      return NextResponse.json({ message: 'Not allowed' }, { status: 403 });\n    }\n\n    const json = await request.json();\n    const parsed = payloadSchema.safeParse(json);\n    if (!parsed.success) {\n      return NextResponse.json({ message: 'Invalid input', issues: parsed.error.flatten() }, { status: 400 });\n    }\n\n    const { email, password, name, role, isActive } = parsed.data;\n    const normalizedEmail = email.trim().toLowerCase();\n\n    const passwordHash = await hashPassword(password);\n\n    const user = await prisma.user.upsert({\n      where: { email: normalizedEmail },\n      update: {\n        name,\n        role,\n        isActive,\n        password: passwordHash,\n      },\n      create: {\n        email: normalizedEmail,\n        name,\n        role,\n        isActive,\n        password: passwordHash,\n      },\n    });\n\n    return NextResponse.json({ message: 'User upserted', user: { ...user, password: undefined } }, { status: 200 });\n  } catch (err) {\n    console.error(err);\n    return NextResponse.json({ message: 'Internal Server Error' }, { status: 500 });\n  }\n}\n","size_bytes":1599},"src/app/api/auth/login/route.ts":{"content":"import { NextResponse } from 'next/server';\nimport prisma from '@/lib/prisma';\nimport { comparePasswords } from '@/lib/password';\nimport { signJwt } from '@/lib/auth';\nimport { z } from 'zod';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string(),\n});\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    const validation = loginSchema.safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json({ message: 'Invalid input' }, { status: 400 });\n    }\n\n    const { email, password } = validation.data;\n    const normalizedEmail = email.trim().toLowerCase();\n\n    const user = await prisma.user.findFirst({\n      where: { email: { equals: normalizedEmail, mode: 'insensitive' } },\n    });\n\n    if (!user || !(await comparePasswords(password, user.password))) {\n      return NextResponse.json(\n        { message: 'Invalid email or password' },\n        { status: 401 }\n      );\n    }\n\n    if (!user.isActive) {\n        return NextResponse.json(\n            { message: 'Your account is inactive. Please contact an administrator.' },\n            { status: 403 }\n        );\n    }\n\n    await prisma.user.update({\n        where: { id: user.id },\n        data: { lastLogin: new Date() },\n    });\n    \n    // In a real app, you would also create an ActivityLog here\n    // await prisma.activityLog.create(...)\n\n    const { password: _, ...userWithoutPassword } = user;\n\n    const token = await signJwt(userWithoutPassword);\n\n    const response = NextResponse.json(\n      { message: 'Login successful', user: userWithoutPassword },\n      { status: 200 }\n    );\n\n    response.cookies.set('token', token, {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict',\n      path: '/',\n      maxAge: 60 * 60 * 24 * 7, // 1 week\n    });\n\n    return response;\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json(\n      { message: 'Internal Server Error' },\n      { status: 500 }\n    );\n  }\n}\n\n","size_bytes":2034},"src/app/api/auth/logout/route.ts":{"content":"import { NextResponse } from 'next/server';\n\nexport async function POST() {\n  const response = NextResponse.json({ message: 'Logout successful' }, { status: 200 });\n  \n  response.cookies.set('token', '', {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'strict',\n    path: '/',\n    expires: new Date(0),\n  });\n\n  return response;\n}\n","size_bytes":370},"src/app/api/users/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { verifyJwt } from '@/lib/auth';\nimport prisma from '@/lib/prisma';\nimport { z } from 'zod';\n\nconst updateUserSchema = z.object({\n  name: z.string().min(1, 'Name is required').optional(),\n  role: z.enum(['KARYAWAN', 'ADMIN', 'SUPER_ADMIN']).optional(),\n  isActive: z.boolean().optional(),\n});\n\n// PUT /api/users/[id] - Update user (admin only)\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const token = request.cookies.get('token')?.value;\n    if (!token) {\n      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n    }\n\n    const user = await verifyJwt(token);\n    if (!user || user.role !== 'SUPER_ADMIN') {\n      return NextResponse.json({ message: 'Forbidden' }, { status: 403 });\n    }\n\n    const body = await request.json();\n    const validation = updateUserSchema.safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json(\n        { message: 'Invalid input', errors: validation.error.flatten() },\n        { status: 400 }\n      );\n    }\n\n    const { id } = params;\n    const updateData = validation.data;\n\n    // Check if user exists\n    const existingUser = await prisma.user.findUnique({\n      where: { id },\n      select: { id: true, name: true, email: true, role: true, isActive: true }\n    });\n\n    if (!existingUser) {\n      return NextResponse.json(\n        { message: 'User not found' },\n        { status: 404 }\n      );\n    }\n\n    // Prevent admin from demoting themselves\n    if (id === user.id && updateData.role && updateData.role !== 'SUPER_ADMIN') {\n      return NextResponse.json(\n        { message: 'Cannot change your own admin privileges' },\n        { status: 400 }\n      );\n    }\n\n    // Prevent admin from deactivating themselves\n    if (id === user.id && updateData.isActive === false) {\n      return NextResponse.json(\n        { message: 'Cannot deactivate your own account' },\n        { status: 400 }\n      );\n    }\n\n    // Update user\n    const updatedUser = await prisma.user.update({\n      where: { id },\n      data: updateData,\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        role: true,\n        isActive: true,\n        lastLogin: true,\n        createdAt: true,\n      }\n    });\n\n    // Log activity\n    const changes = Object.entries(updateData)\n      .filter(([key, value]) => existingUser[key as keyof typeof existingUser] !== value)\n      .map(([key, value]) => `${key}: ${existingUser[key as keyof typeof existingUser]} → ${value}`)\n      .join(', ');\n\n    if (changes) {\n      await prisma.activityLog.create({\n        data: {\n          userId: user.id,\n          action: updateData.role ? 'UPDATE_USER_ROLE' : 'TOGGLE_USER_STATUS',\n          details: `Updated user ${existingUser.name}: ${changes}`,\n          ipAddress: request.headers.get('x-forwarded-for') || \n                     request.headers.get('x-real-ip') || \n                     'unknown',\n        },\n      });\n    }\n\n    return NextResponse.json({\n      message: 'User updated successfully',\n      user: updatedUser\n    });\n\n  } catch (error) {\n    console.error('Update user error:', error);\n    return NextResponse.json(\n      { message: 'Failed to update user' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":3313},"src/app/api/folders/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { verifyJwt } from '@/lib/auth';\nimport prisma from '@/lib/prisma';\nimport { z } from 'zod';\n\nconst updateFolderSchema = z.object({\n  name: z.string().min(1, 'Folder name is required').max(100, 'Folder name too long'),\n});\n\n// PUT /api/folders/[id] - Update folder name\nexport async function PUT(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const token = request.cookies.get('token')?.value;\n    if (!token) {\n      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n    }\n\n    const user = await verifyJwt(token);\n    if (!user) {\n      return NextResponse.json({ message: 'Invalid token' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const validation = updateFolderSchema.safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json(\n        { message: 'Invalid input', errors: validation.error.flatten() },\n        { status: 400 }\n      );\n    }\n\n    const { id } = params;\n    const { name } = validation.data;\n\n    // Check if folder exists and user has permission\n    const existingFolder = await prisma.folder.findUnique({\n      where: { id },\n      include: { user: { select: { id: true, name: true } } }\n    });\n\n    if (!existingFolder) {\n      return NextResponse.json(\n        { message: 'Folder not found' },\n        { status: 404 }\n      );\n    }\n\n    // Check ownership (or if user is admin)\n    if (existingFolder.userId !== user.id && user.role !== 'SUPER_ADMIN') {\n      return NextResponse.json(\n        { message: 'You can only edit your own folders' },\n        { status: 403 }\n      );\n    }\n\n    // Check if another folder with same name exists for this user\n    const duplicateFolder = await prisma.folder.findFirst({\n      where: {\n        name: { equals: name, mode: 'insensitive' },\n        userId: existingFolder.userId,\n        id: { not: id }\n      }\n    });\n\n    if (duplicateFolder) {\n      return NextResponse.json(\n        { message: 'Folder with this name already exists' },\n        { status: 409 }\n      );\n    }\n\n    // Update folder\n    const updatedFolder = await prisma.folder.update({\n      where: { id },\n      data: { name },\n      include: {\n        user: {\n          select: { name: true, email: true }\n        },\n        _count: {\n          select: {\n            documents: true\n          }\n        }\n      }\n    });\n\n    return NextResponse.json({\n      message: 'Folder updated successfully',\n      folder: updatedFolder\n    });\n\n  } catch (error) {\n    console.error('Update folder error:', error);\n    return NextResponse.json(\n      { message: 'Failed to update folder' },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/folders/[id] - Delete folder\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const token = request.cookies.get('token')?.value;\n    if (!token) {\n      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n    }\n\n    const user = await verifyJwt(token);\n    if (!user) {\n      return NextResponse.json({ message: 'Invalid token' }, { status: 401 });\n    }\n\n    const { id } = params;\n\n    // Check if folder exists and user has permission\n    const existingFolder = await prisma.folder.findUnique({\n      where: { id },\n      include: {\n        _count: {\n          select: {\n            documents: true\n          }\n        }\n      }\n    });\n\n    if (!existingFolder) {\n      return NextResponse.json(\n        { message: 'Folder not found' },\n        { status: 404 }\n      );\n    }\n\n    // Check ownership (or if user is admin)\n    if (existingFolder.userId !== user.id && user.role !== 'SUPER_ADMIN') {\n      return NextResponse.json(\n        { message: 'You can only delete your own folders' },\n        { status: 403 }\n      );\n    }\n\n    // Check if folder has documents\n    if (existingFolder._count.documents > 0) {\n      return NextResponse.json(\n        { message: 'Cannot delete folder that contains documents. Move or delete documents first.' },\n        { status: 400 }\n      );\n    }\n\n    // Delete folder\n    await prisma.folder.delete({\n      where: { id }\n    });\n\n    return NextResponse.json({\n      message: 'Folder deleted successfully'\n    });\n\n  } catch (error) {\n    console.error('Delete folder error:', error);\n    return NextResponse.json(\n      { message: 'Failed to delete folder' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":4463},"src/app/api/folders/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server';\nimport { verifyJwt } from '@/lib/auth';\nimport prisma from '@/lib/prisma';\nimport { z } from 'zod';\n\nconst createFolderSchema = z.object({\n  name: z.string().min(1, 'Folder name is required').max(100, 'Folder name too long'),\n});\n\n// GET /api/folders - List all folders for the current user\nexport async function GET(request: NextRequest) {\n  try {\n    const token = request.cookies.get('token')?.value;\n    if (!token) {\n      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n    }\n\n    const user = await verifyJwt(token);\n    if (!user) {\n      return NextResponse.json({ message: 'Invalid token' }, { status: 401 });\n    }\n\n    // Get folders for current user (or all if admin)\n    const folders = await prisma.folder.findMany({\n      where: user.role === 'SUPER_ADMIN' ? {} : { userId: user.id },\n      include: {\n        user: {\n          select: { name: true, email: true }\n        },\n        _count: {\n          select: {\n            documents: true\n          }\n        }\n      },\n      orderBy: { createdAt: 'desc' }\n    });\n\n    return NextResponse.json({ folders });\n\n  } catch (error) {\n    console.error('Folders API error:', error);\n    return NextResponse.json(\n      { message: 'Failed to fetch folders' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/folders - Create new folder\nexport async function POST(request: NextRequest) {\n  try {\n    const token = request.cookies.get('token')?.value;\n    if (!token) {\n      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\n    }\n\n    const user = await verifyJwt(token);\n    if (!user) {\n      return NextResponse.json({ message: 'Invalid token' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const validation = createFolderSchema.safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json(\n        { message: 'Invalid input', errors: validation.error.flatten() },\n        { status: 400 }\n      );\n    }\n\n    const { name } = validation.data;\n\n    // Check if folder with same name already exists for this user\n    const existingFolder = await prisma.folder.findFirst({\n      where: {\n        name: { equals: name, mode: 'insensitive' },\n        userId: user.id\n      }\n    });\n\n    if (existingFolder) {\n      return NextResponse.json(\n        { message: 'Folder with this name already exists' },\n        { status: 409 }\n      );\n    }\n\n    // Create folder\n    const folder = await prisma.folder.create({\n      data: {\n        name,\n        userId: user.id,\n      },\n      include: {\n        user: {\n          select: { name: true, email: true }\n        },\n        _count: {\n          select: {\n            documents: true\n          }\n        }\n      }\n    });\n\n    return NextResponse.json({\n      message: 'Folder created successfully',\n      folder\n    });\n\n  } catch (error) {\n    console.error('Create folder error:', error);\n    return NextResponse.json(\n      { message: 'Failed to create folder' },\n      { status: 500 }\n    );\n  }\n}","size_bytes":3055}},"version":1}